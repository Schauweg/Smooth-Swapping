plugins {
    id "com.github.johnrengelman.shadow"
    id "me.shedaniel.unified-publishing"
}

architectury {
    platformSetupLoomIde()
    neoForge()
}

loom {
    accessWidenerPath = project(":common").loom.accessWidenerPath
}

configurations {
    common
    shadowCommon // Don't use shadow from the shadow plugin because we don't want IDEA to index this.
    compileClasspath.extendsFrom common
    runtimeClasspath.extendsFrom common
    developmentNeoForge.extendsFrom common
}

repositories {
    maven {
        name "neoforgedReleases"
        url "https://maven.neoforged.net/releases"
    }
}

dependencies {
    neoForge "net.neoforged:neoforge:${project.forge_version}"

    common(project(path: ":common", configuration: "namedElements")) { transitive false }
    shadowCommon(project(path: ":common", configuration: "transformProductionNeoForge")) { transitive = false }
}

processResources {
    inputs.property "version", project.version

    filesMatching("META-INF/mods.toml") {
        expand "version": project.version
    }
}

shadowJar {
    exclude "fabric.mod.json"

    configurations = [project.configurations.shadowCommon]
    archiveClassifier = "dev-shadow"
}

remapJar {
    atAccessWideners.add(loom.accessWidenerPath.get().asFile.name)

    input.set shadowJar.archiveFile
    dependsOn shadowJar
    archiveClassifier = "${rootProject.minecraft_version}-forge"
}

jar {
    archiveClassifier = "dev"
}

sourcesJar {
    def commonSources = project(":common").sourcesJar
    dependsOn commonSources
    from commonSources.archiveFile.map { zipTree(it) }
}

components.java {
    withVariantsFromConfiguration(project.configurations.shadowRuntimeElements) {
        skip()
    }
}

publishing {
    publications {
        mavenNeoForge(MavenPublication) {
            artifactId = rootProject.archives_base_name + "-" + project.name
            from components.java
        }
    }

    // See https://docs.gradle.org/current/userguide/publishing_maven.html for information on how to set up publishing.
    repositories {
        // Add repositories to publish to here.
    }
}

def CHANGELOG = new File(rootProject.projectDir.getAbsolutePath(), "CHANGELOG.MD").text
def SUPPORTED_VERSIONS = Arrays.asList(project.supported_versions.split(','))

unifiedPublishing {
    project {
        displayName = "[Forge $project.minecraft_version] v$project.version"
        releaseType = "$rootProject.artifact_type"
        changelog = CHANGELOG
        gameVersions = SUPPORTED_VERSIONS
        gameLoaders = ["neoforge"]
        mainPublication tasks.remapJar

        var CURSE_API_KEY = System.getenv("CURSEFORGE_API_KEY")
        if (CURSE_API_KEY != null) {
            curseforge {
                token = CURSE_API_KEY
                id = rootProject.curseforge_id
                gameVersions.addAll "Java 17"
            }
        }

        var MODRINTH_TOKEN = System.getenv("MODRINTH_TOKEN")
        if (MODRINTH_TOKEN != null) {
            modrinth {
                token = MODRINTH_TOKEN
                id = rootProject.modrinth_id
                version = "$rootProject.mod_version-$rootProject.minecraft_version"
            }
        }
    }
}